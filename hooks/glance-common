#$!/bin/bash

SERVICES="glance-api glance-registry"
PACKAGES="glance python-mysqldb python-swift python-keystone"

GLANCE_REGISTRY_CONF=$(config-get registry-config)
GLANCE_REGISTRY_PASTE_INI="/etc/glance/glance-registry-paste.ini"
GLANCE_API_CONF=$(config-get api-config)
GLANCE_API_PASTE_INI="/etc/glance/glance-api-paste.ini"

DB_USER=$(config-get db-user)
GLANCE_DB=$(config-get glance-db)
PPA=$(config-get glance-release)

HOSTNAME=`hostname -f`

function glance_ctl_status {
  SERVICE=$1
  # workaround upstarts lack of scriptable return codes
  STATUS=$(service $SERVICE status | cut -d/ -f1 | awk '{ print $2 }')
  case $STATUS in
    "start") return 0 ;;
    "stop") return 1 ;;
    *) echo "ERROR: Unexpected status of service $SERVICE: $STATUS" && exit 1 ;;
  esac
}

function glance_ctl {
  if [[ $1 == "all" ]] ; then
    CTL=$SERVICES
  else
    CTL=$1
  fi
  ACTION=$2
  if [[ -z $CTL ]] || [[ -z $ACTION ]] ; then
    juju-log "ERROR glance_ctl: Not enough arguments"
    exit 1
  fi
  for i in $CTL ; do
    case $ACTION in
      "start")
        glance_ctl_status $i || service $i start ;;
      "stop")
        glance_ctl_status $i && service $i stop || return 0 ;;
      "restart")
        glance_ctl_status $i && service $i restart || service $i start ;;
    esac
    if [[ $? != 0 ]] ; then
      juju-log "glance_ctl: ERROR - Service $i failed to $ACTION"
    fi
  done
}

function set_paste_deploy_flavor {
  local flavor="$1"
  local config="$2"
  case $config in
    "api") local conf=$GLANCE_API_CONF ;;
    "registry") local conf=$GLANCE_REGISTRY_CONF ;;
    *) juju-log "ERROR: set_paste_deploy: invalid config=$config" && exit 1 ;;
  esac    
  if ! grep -q "\[paste_deploy\]" "$conf" ; then
    juju-log "Updating $conf: Setting new paste_deploy flavor = $flavor"
    echo -e "\n[paste_deploy]\nflavor = keystone\n" >>$conf && return 0
    juju-log "ERROR: Could not update paste_deploy flavor in $conf" && return 1
  fi
  juju-log "Updating $conf: Setting paste_deploy flavor = $flavor"
  local tag="[paste_deploy]"
  sed -i "/$tag/, +1 s/\(flavor = \).*/\1$flavor/g" $conf && return 0
  juju-log "ERROR: Could not update paste_deploy flavor in $conf" && return 1
}

function update_pipeline {
  # updates pipeline middleware definitions in api-paste.ini
  local pipeline="$1"
  local new="$2"
  local config="$3"

  case $config in
    "api") local api_conf=$GLANCE_API_CONF ;;
    "registry") local api_conf=$GLANCE_REGISTRY_CONF ;;
    *) juju-log "ERROR: update_pipeline: invalid config=$config" && exit 1 ;;
  esac    

  local tag="\[pipeline:$pipeline\]"
  if ! grep -q "$tag" $api_conf ; then
      juju-log "ERROR: update_pipeline: pipeline not found: $pipeline"
      return 1
  fi
  juju-log "Updating pipeline:$pipeline in $api_conf"
  sed -i "/$tag/, +1 s/\(pipeline = \).*/\1$new/g" $api_conf
}

function set_or_update {
  # This handles configuration of both api and registry server
  # until LP #806241 is resolved.  Until then, $3 is either
  # 'api' or 'registry' to specify which
  # set or update a key=value config option in glance.conf
  KEY=$1
  VALUE=$2
  case "$3" in
    "api") CONF=$GLANCE_API_CONF ;;
    "api-paste") CONF=$GLANCE_API_PASTE_INI ;;
    "registry") CONF=$GLANCE_REGISTRY_CONF ;;
    "registry-paste") CONF=$GLANCE_REGISTRY_PASTE_INI ;;
    *) juju-log "ERROR: set_or_update(): Invalid or no config file specified." \
        && exit 1 ;;
  esac
  [[ -z $KEY ]] && juju-log "ERROR: set_or_update(): value $VALUE missing key" \
        && exit 1
  [[ -z $VALUE ]] && juju-log "ERROR: set_or_update(): key $KEY missing value" \
        && exit 1
  cat $CONF | grep "$KEY = $VALUE" >/dev/null \
   && juju-log "glance: $KEY = $VALUE already set" exit 0
  if cat $CONF | grep "$KEY =" >/dev/null ; then
    sed -i "s|\($KEY = \).*|\1$VALUE|" $CONF
  else
    echo "$KEY = $VALUE" >>$CONF
  fi
}

function add_ppa {
  # Install from archive instead of PPA.
  [[ $PPA == "distro" ]] && return 0
  . /etc/lsb-release
  [[ -z $PPA ]] && return 0
  # if referenced by name, setup ppa to upstream PPAs
  if [[ "$PPA" == "trunk" ]] ||
     [[ "$PPA" == "milestone" ]] ||
     [[ "$PPA" == "milestone-proposed" ]] ; then 
      juju-log "glance: Configuring installation from upstream PPA ($PPA)"
      PPA_URL="deb http://ppa.launchpad.net/glance-core/$PPA/ubuntu $DISTRIB_CODENAME main"
      add-apt-repository "$PPA_URL" || exit 1
      return
  fi
  if [[ "${PPA:0:4}" == "ppa:" ]] ; then 
    juju-log "glance: Configuring installation from custom PPA ($PPA)"
    add-apt-repository -y "$PPA" || exit 1
    return
  fi
  if [[ "${PPA:0:3}" == "deb" ]] ; then
    juju-log "glance: Configuring installation from custom PPA URL ($PPA)"
    if echo "$PPA" | grep -q "|" ; then
      # gpg key id tagged to end of url folloed by a |
      url=$(echo $PPA | cut -d'|' -f1)
      key=$(echo $PPA | cut -d'|' -f2)
      if [[ -n "$key" ]] ; then
        juju-log "Importing repository key: $key"
        apt-key adv --keyserver keyserver.ubuntu.com --recv-keys "$key" || \
          juju-log "WARN: Could not import key from keyserver: $key"
      else
        juju-log "No repository key specified"
        url="$PPA"
      fi 
      add-apt-repository -y "$url"
    fi
    return    
  fi 
  juju-log "glance: No PPA specified. Falling back to installation from Ubuntu archive."
}
